에러 기록
=================================================================================================
2025.2.18(화) 오전 9시
제목: 로컬 실행 후 접속시 무한 루프 발생
원인: 헤더 역할로 index.jsp를 include를 받고 있어서 페이지를 호출할 때마다 보안문제에 걸려서 재호출
해결: O

SecurityConfig.java

memberLoginPage가 무수히 호출되는 것을 확인

https://e1jong.tistory.com/255

스프링부트 3.0이상 스프링시큐리티 6.0 이상에서는 forward 방식에서도 기본적으로 인증이 걸리도록 변경돼서 무한루프에 빠짐
(현재 스프링부트 3.1.4 스프링시큐리티 6.x)

따라서 포워딩을 허용해준다는 설정을 추가해주면 된다

request.dispatcherTypeMatchers(DispatcherType.FORWARD).permitAll() 이게 핵심이다.

무한루프 현상 해결

=================================================================================================
2025.2.18(화) 오전 10시
제목: 스프링 시큐리티 해당 부분에서 에러 발생
원인: Spring Security에서 발생한 오류는 requestMatchers() 메서드가 Spring MVC 패턴인지 서블릿 패턴인지 명확히 구분할 수 없어서 생긴 문제
해결: O

SecurityConfig.java

.requestMatchers("/").permitAll()

에러문구
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration': Unsatisfied dependency expressed through method 'setFilterChains' parameter 0: Error creating bean with name 'securityFilterChain' defined in class path resource [com/board/tjpost/config/SecurityConfig.class]: Failed to instantiate [org.springframework.security.web.SecurityFilterChain]: Factory method 'securityFilterChain' threw exception with message: This method cannot decide whether these patterns are Spring MVC patterns or not. If this endpoint is a Spring MVC endpoint, please use requestMatchers(MvcRequestMatcher); otherwise, please use requestMatchers(AntPathRequestMatcher).

This is because there is more than one mappable servlet in your servlet context: {org.apache.jasper.servlet.JspServlet=[*.jspx, *.jsp], org.springframework.web.servlet.DispatcherServlet=[/]}.


Spring Security에서 발생한 오류는 requestMatchers() 메서드가 Spring MVC 패턴인지 서블릿 패턴인지 명확히 구분할 수 없어서 생긴 문제입니다.

Spring MVC 패턴(MvcRequestMatcher)
1.Spring MVC 컨트롤러에서 사용하는 URL 매칭 방식입니다.
2.DispatcherServlet을 통해 매핑됩니다
3.예: @RequestMapping("/example")
4.URL 패턴은 서블릿 컨텍스트에 상대적인 경로입니다.
5.뷰 리졸버(ViewResolver)가 뷰를 찾아서 렌더링합니다.

서블릿 패턴
1.서블릿 레벨에서 URL을 매칭합니다.
2.JSP나 서블릿과 같은 정적 자원도 포함됩니다.
3.web.xml 이나 애너테이션을 사용해 매핑합니다.
4.예: *.jsp, /static/*
5.컨텍스트 루프를 포함한 URL로 매칭합니다.


에러가 발생하는 이유
Spring Security 6.x 이상부터는 requestMatchers() 가 Spring MVC와 서블릿 패턴을 자동으로 구분하지 않습니다.

Spring Boot는 내부적으로 두 가지 서블릿을 사용 중입니다.
1.JspServlet: *.jsp, *.jspx 와 같은 JSP 파일 처리
2.DispatcherServlet: Spring MVC 컨트롤러의 모든 URL(/*)

Spring MVC URL인지, JSP URL인지 명시를 해줘야 한다

new MvcRequestMatcher / new AntPathRequestMatcher

MvcRequestMatcher: Spring MVC 경로에만 적용, Spring MVC 경로만 분석
AntPathRequestMatcher: 서블릿 수준에서 매칭, JSP, 정적 자원(.css, .js, .jpg 등)에 사용

=================================================================================================
2025.2.18(월) 
제목: 회원가입이 정상적으로 작동하지 않음
원인: csrf 토큰을 비활성화하지 않은 상태에서 csrf 값을 넘겨주지 않아서 발생
해결: O

SecurityConfig.java 에서 csrf.disable() 을 하지 않은 상태

어차피 사용을 해야 하는거라면 로컬부터 적용시켜보고 싶어서 csrf 토큰을 사용하는 방식을 채택

기본적으로 GET 요청은 잘 뜨지만 POST 요청은 CSRF 토큰이 필요하다

CSRF 토큰이 누락돼서 회원가입 가입은 처리가 안되고 로그인 페이지로 리다이렉트됨

<form action="/member/join" method="post">
    <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}">
	...
</form>

form 태그 안에 hidden 타입으로 csrf 토큰 추가

Spring Security는 JSP에서 ${_csrf.parameterName}와 ${_csrf.token}을 자동으로 제공합니다.

csrf 토큰 추가하니 회원가입이 잘되는 것을 확인할 수 있음

=================================================================================================
2025.2.18(화)
제목: 회원가입 시 아이디 중복 처리 중 ajax를 통해서 데이터가 들어오지 않음
원인: 스프링 시큐리티에서 해당 url을 접근 허용을 안함
해결: O

일반적으로 AJAX는 JSON 데이터나 텍스트를 기대하지만, 서버가 HTML 페이지를 반환하는 경우가 이에 해당합니다.

컨트롤러에서 @ResponseBody 를 사용하지 않았거나, AJAX 요청이 잘못된 방식으로 처리되고 있을 가능성이 있습니다. AJAX 요청은 일반적으로 JSON 형식의 응답을 기대하기 때문에, 컨트롤러에서 이를 적절히 처리해줘야 합니다.

개발자 도구에서 memberIdCheck 값이 302 Found여서 알아냄

인증되지 않은 사용자가 인증이 필요한 URL에 접근하면 로그인 페이지로 리다이렉트함

결국에는 스프링 시큐리티에서 /member/memberIdCheck 접근허용을 안해서 그런거임

접근 허용하니까 해결

1.컨트롤러에 @ResponseBody 추가
2.ajax 통신에 csrf 추가
3.SecurityConfig 에 new AntPathRequestMatcher("/member/memberIdCheck").permitAll 추가

=================================================================================================
